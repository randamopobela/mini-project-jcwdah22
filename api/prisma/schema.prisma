// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  profilePicture    String?   @map("profile_picture")
  role              Role
  referralCode      String    @map("referral_code") @unique
  referredBy        String?   @map("referred_by")
  points            Int       @default(0)
  pointsExpiration  DateTime? @map("points_expiration")
  isActive          Boolean   @map("is_active") @default(true)
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  transactions      Transaction[]
  review            Review[]
  notification      Notification[]
  referral          Referral[] @relation("Referrer")
  referred          Referral[] @relation("Referred")
  pointsLog         PointsLog[]
  coupons           Coupon[]
  events            Event[]   @relation("OrganizerEvents")
  @@map("users")
}

enum Role {
  CUSTOMER
  ORGANIZER
}

model Event {
  id                Int       @id @default(autoincrement())
  name              String
  description       String
  category          String
  location          String
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  price             Int       @default(0)
  availableSeats    Int       @map("available_seats")
  totalSeats        Int       @map("total_seats")
  organizerId       Int       @map("organizer_id")
  organizer         User      @relation("OrganizerEvents", fields: [organizerId], references: [id])
  transactions      Transaction[]
  vouchers          Voucher[]
  reviews           Review[]
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("events")
}

model Transaction {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  userId            Int       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  ticketQuantity    Int       @map("ticket_quantity")
  totalPrice        Int       @map("total_price")
  status            TransactionStatus
  paymentProof      String?   @map("payment_proof")
  paymentMethod     PaymentMethod @map("payment_method")
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("transactions")
}

enum TransactionStatus {
  PENDING_PAYMENT
  PENDING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  E_WALLET
}

model Voucher {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  code              String    @unique
  discountAmount    Int       @map("discount_amount")
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("vouchers")
}

model Coupon {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  discountAmount    Int       @map("discount_amount")
  expirationDate    DateTime  @map("expiration_date")
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("coupons")
}

model Review {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  userId            Int       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  rating            Int
  comment           String?
  createdAt         DateTime  @map("created_at") @default(now())

  @@map("reviews")
}

model Referral {
  id                Int       @id @default(autoincrement())
  referrerId        Int       @map("referrer_id")
  referredId        Int       @map("referred_id")
  referrer          User      @relation("Referrer", fields: [referrerId], references: [id])
  referred          User      @relation("Referred", fields: [referredId], references: [id])
  pointsGiven       Int       @map("points_given") @default(0) // Jumlah poin yang diberikan kepada pengguna yang mereferensikan
  createdAt         DateTime  @map("created_at") @default(now())

  @@map("referrals")
}

model PointsLog {
  id          Int       @id @default(autoincrement())
  userId      Int       // User yang menerima poin
  user        User      @relation(fields: [userId], references: [id])
  description String    // Keterangan terkait poin (misal: "Referal bonus", "Pembelian kupon", dll.)
  points      Int       // Jumlah poin yang ditambahkan/dikurangi
  createdAt   DateTime  @default(now())

  @@map("points_log")
}

model Notification {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  type              String
  message           String
  read              Boolean   @default(false)
  createdAt         DateTime  @map("created_at") @default(now())

  @@map("notifications")
}

/// Define SQL transaction to handle rollbacks
model SQLTransaction {
  id                Int       @id @default(autoincrement())
  action            String
  status            String
  timestamp         DateTime  @default(now())

  @@map("sql_transactions")
}
