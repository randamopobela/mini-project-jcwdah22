// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String    @id
    email             String    @unique
    password          String
    userName          String    @map("user_name") @unique
    firstName         String    @map("first_name")
    lastName          String?   @map("last_name")
    profilePicture    String?   @map("profile_picture")
    role              UserRole
    phone             String?
    address           String?
    referralCode      String    @map("referral_code") @unique
    isActive          Boolean   @map("is_active") @default(true)
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    events            Event[]   @relation("OrganizerEvents")
    transactions      Transaction[]
    tickets           Ticket[]
    voucherAssignments VoucherAssignment[]
    coupons           Coupon[]
    userPoints        UserPoints[]
    pointsLog         PointsLog[]
    referral          Referral[] @relation("Referrer")
    referred          Referral[] @relation("Referred")
    reviews           Review[]
    badges            UserBadge[]
    notifications     Notification[]

    @@map("users")
}

enum UserRole {
    CUSTOMER
    ORGANIZER
    ADMIN
}

model Event {
    id              Int       @id @default(autoincrement())
    title           String    @unique
    description     String
    category        EventCategory
    eventPicture    String?   @map("event_picture")
    location        String
    startDate       DateTime  @map("start_date")
    endDate         DateTime  @map("end_date")
    price           Int       @default(0)
    availableSlots  Int       @map("available_slots")
    totalSlots      Int       @map("total_slots")
    organizerId     String    @map("organizer_id")
    organizer       User      @relation("OrganizerEvents", fields: [organizerId], references: [id])
    status          EventStatus @default(DRAFT)
    isFree          Boolean   @default(false)
    createdAt       DateTime  @map("created_at") @default(now())
    updatedAt       DateTime  @map("updated_at") @updatedAt

    transactions    Transaction[]
    tickets         Ticket[]
    vouchers        Voucher[]
    reviews         Review[]
    badges          UserBadge[]

    @@map("events")
}

enum EventCategory {
    FUN_RUN
    FIVE_K
    TEN_K
    HALF_MARATHON
    MARATHON
    ULTRA_MARATHON
    TRAIL_RUN
    VIRTUAL_RUN
}

enum EventStatus {
    DRAFT
    PUBLISHED
    ONGOING
    COMPLETED
    CANCELED
}

model Transaction {
    id                Int       @id @default(autoincrement())
    eventId           Int       @map("event_id")
    event             Event     @relation(fields: [eventId], references: [id])
    userId            String    @map("user_id")
    user              User      @relation(fields: [userId], references: [id])
    ticketQuantity    Int       @map("ticket_quantity")
    totalPrice        Int       @map("total_price")
    discountPoints    Int       @map("discount_points") @default(0)  // poin yang dipakai
    discountVouchers  Int       @map("discount_vouchers") @default(0)
    discountCoupons   Int       @map("discount_coupons") @default(0)
    finalPrice        Int       @map("final_price")      // total setelah diskon
    status            TransactionStatus
    paymentProof      String?   @map("payment_proof")
    paymentMethod     PaymentMethod @map("payment_method")
    expiredAt         DateTime @map("expired_at")
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    tickets           Ticket[]
    vouchers          VoucherAssignment[]
    coupons           Coupon[]

    @@map("transactions")
}

enum TransactionStatus {
    AWAITING_PAYMENT
    PENDING_CONFIRMATION
    PAID
    REJECTED
    EXPIRED
    CANCELED
}

enum PaymentMethod {
    BANK_TRANSFER
    CREDIT_CARD
    E_WALLET
}

model Ticket {
    id                Int       @id @default(autoincrement())
    ticketCode        String    @map("ticket_code") @unique
    eventId           Int       @map("event_id")
    event             Event     @relation(fields: [eventId], references: [id])
    userId            String    @map("user_id")
    user              User      @relation(fields: [userId], references: [id])
    transactionId     Int       @map("transaction_id")
    transaction       Transaction @relation(fields: [transactionId], references: [id])
    bibNumber         String?   @map("bib_number") @unique
    status            TicketStatus @default(ISSUED)
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    @@map("tickets")
}

enum TicketStatus {
    ISSUED
    USED
    CANCELED
}

model Voucher {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  voucherCode       String    @map("voucher_code") @unique
  discountAmount    Int       @map("discount_amount")
  minimalPurchase   Int       @map("minimal_purchase")
  maximalDiscount   Int       @map("maximal_discount")
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  isActive          Boolean   @default(false)
  isEarlyBird       Boolean   @default(false)
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  assignments       VoucherAssignment[]

  @@map("vouchers")
}

model VoucherAssignment {
    id            Int     @id @default(autoincrement())
    userId        String  @map("user_id")
    user          User    @relation(fields: [userId], references: [id])
    voucherId     Int     @map("voucher_id")
    voucher       Voucher @relation(fields: [voucherId], references: [id])
    transactionId Int     @map("transaction_id")
    transaction   Transaction  @relation(fields: [transactionId], references: [id])
    status        VoucherStatus @default(ISSUED)
    usedAt        DateTime? @map("used_at")

    @@map("voucher_assignments")
}

enum VoucherStatus {
    ISSUED
    CANCELED
}

model Coupon {
    id              Int           @id @default(autoincrement())
    title           String
    description     String
    couponCode      String        @map("coupon_code") @unique
    discountAmount  Int           @map("discount_amount")
    expiredAt       DateTime      @map("expired_at")
    userId          String        @map("user_id")
    user            User          @relation(fields: [userId], references: [id])
    transactionId   Int?          @map("transaction_id")
    transaction     Transaction?  @relation(fields: [transactionId], references: [id])
    isActive        Boolean       @default(true)
    isUsed          Boolean       @default(false)
    usedAt          DateTime?
    createdAt       DateTime      @map("created_at") @default(now())
    updatedAt       DateTime      @map("updated_at") @updatedAt

    @@map("coupons")
}
model Review {
  id        Int       @id @default(autoincrement())
  eventId   Int       @map("event_id")
  event     Event     @relation(fields: [eventId], references: [id])
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  title     String?
  rating    Int
  comment   String?
  createdAt DateTime  @map("created_at") @default(now())

  @@map("reviews")
}

model Badge {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  description String?
  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  users     UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  eventId   Int       @map("event_id")
  event     Event     @relation(fields: [eventId], references: [id])
  badgeId   Int       @map("badge_id")
  badge     Badge     @relation(fields: [badgeId], references: [id])
  createdAt DateTime  @map("created_at") @default(now())

  @@map("user_badges")
}

model Referral {
  id            Int       @id @default(autoincrement())
  referrerId    String    @map("referrer_id")
  referrer      User      @relation("Referrer", fields: [referrerId], references: [id])
  referredId    String    @map("referred_id")
  referred      User      @relation("Referred", fields: [referredId], references: [id])
  createdAt     DateTime  @map("created_at") @default(now())

  @@map("referrals")
}

model UserPoints {
    id          Int       @id @default(autoincrement())
    userId      String    @map("user_id") @unique
    user        User      @relation(fields: [userId], references: [id])
    totalPoints Int       @map("total_points") @default(0)
    createdAt   DateTime  @map("created_at") @default(now())
    updatedAt   DateTime  @map("updated_at") @updatedAt

    @@map("user_points")
}

model PointsLog {
  id          Int          @id @default(autoincrement())
  userId      String       
  user        User         @relation(fields: [userId], references: [id])
  type        PointsLogType
  description String    // Misal: "Referral bonus from user X"
  points      Int
  expiredAt   DateTime
  createdAt   DateTime     @default(now())

  @@map("points_log")
}

enum PointsLogType {
    REFERRAL_BONUS
    PURCHASE
    PROMOTION
    REDEMPTION
    REFUND
}

model Notification {
    id        Int             @id @default(autoincrement())
    userId    String          @map("user_id")
    user      User            @relation(fields: [userId], references: [id])
    type      NotificationType
    message   String
    isRead    Boolean         @map("is_read") @default(false)
    createdAt DateTime        @map("created_at") @default(now())

    @@map("notifications")
}

enum NotificationType {
    TRANSACTION
    EVENT_UPDATE
    REMINDER
    SYSTEM
}
