// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String    @id @unique
    email             String    @unique
    password          String
    firstName         String    @map("first_name")
    lastName          String?   @map("last_name")
    profilePicture    String?   @map("profile_picture")
    role              UserRole
    referralCode      String    @map("referral_code") @unique
    referredBy        String?   @map("referred_by")
    points            Int       @default(0)
    pointsExpiration  DateTime? @map("points_expiration")
    isActive          Boolean   @map("is_active") @default(true)
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    transactions      Transaction[]
    tickets           Tickets[]
    review            Review[]
    notification      Notification[]
    referral          Referral[] @relation("Referrer")
    referred          Referral[] @relation("Referred")
    pointsLog         PointsLog[]
    coupons           Coupon[]
    events            Event[]   @relation("OrganizerEvents")
    @@map("users")
}

enum UserRole {
    CUSTOMER
    ORGANIZER
}

model Event {
    id                Int       @id @default(autoincrement())
    title             String    @unique
    description       String
    category          EventCategory
    eventPicture      String?   @map("event_picture")
    location          String
    startDate         DateTime  @map("start_date")
    endDate           DateTime  @map("end_date")
    price             Int       @default(0)
    availableSeats    Int       @map("available_seats")
    totalSeats        Int       @map("total_seats")
    organizerId       String    @map("organizer_id")
    organizer         User      @relation("OrganizerEvents", fields: [organizerId], references: [id])
    status            EventStatus @default(DRAFT)
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    transactions      Transaction[]
    tickets           Tickets[]
    vouchers          Voucher[]
    reviews           Review[]

    @@map("events")
}

enum EventCategory {
    Education
    Entertainment
    Social
    Community
    Sports
    Health
    Wedding
    Family
    Religious
    Government
    Public
}

enum EventStatus {
    DRAFT
    PUBLISHED
    CANCELED
}

model Transaction {
    id                Int       @id @default(autoincrement())
    eventId           Int       @map("event_id")
    event             Event     @relation(fields: [eventId], references: [id])
    userId            String    @map("user_id")
    user              User      @relation(fields: [userId], references: [id])
    ticketQuantity    Int       @map("ticket_quantity")
    totalPrice        Int       @map("total_price")
    status            TransactionStatus
    paymentProof      String?   @map("payment_proof")
    paymentMethod     PaymentMethod @map("payment_method")
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    tickets           Tickets[]

    @@map("transactions")
}

enum TransactionStatus {
    PENDING_PAYMENT
    PENDING_CONFIRMATION
    DONE
    REJECTED
    EXPIRED
    CANCELED
}

enum PaymentMethod {
    BANK_TRANSFER
    CREDIT_CARD
    E_WALLET
}

model Tickets {
    id                Int       @id @default(autoincrement())
    ticketCode        String    @map("ticket_code") @unique
    eventId           Int       @map("event_id")
    event             Event     @relation(fields: [eventId], references: [id])
    userId            String    @map("user_id")
    user              User      @relation(fields: [userId], references: [id])
    transactionId     Int       @map("transaction_id")
    transaction       Transaction @relation(fields: [transactionId], references: [id])
    status            TicketStatus @default(ISSUED)
    createdAt         DateTime  @map("created_at") @default(now())
    updatedAt         DateTime  @map("updated_at") @updatedAt

    @@map("tickets")
}

enum TicketStatus {
    ISSUED
    USED
    CANCELED
}

model Voucher {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  voucherCode       String    @map("voucher_code") @unique
  discountAmount    Int       @map("discount_amount")
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("vouchers")
}

model Coupon {
  id                Int       @id @default(autoincrement())
  userId            String       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  discountAmount    Int       @map("discount_amount")
  expirationDate    DateTime  @map("expiration_date")
  createdAt         DateTime  @map("created_at") @default(now())
  updatedAt         DateTime  @map("updated_at") @updatedAt

  @@map("coupons")
}

model Review {
  id                Int       @id @default(autoincrement())
  eventId           Int       @map("event_id")
  event             Event     @relation(fields: [eventId], references: [id])
  userId            String       @map("user_id")
  user              User      @relation(fields: [userId], references: [id])
  rating            Int
  comment           String?
  createdAt         DateTime  @map("created_at") @default(now())

  @@map("reviews")
}

model Referral {
  id                Int       @id @default(autoincrement())
  referrerId        String       @map("referrer_id")
  referredId        String       @map("referred_id")
  referrer          User      @relation("Referrer", fields: [referrerId], references: [id])
  referred          User      @relation("Referred", fields: [referredId], references: [id])
  referrerPoint     Int       @map("referrer_point") @default(0) // Jumlah poin yang diberikan kepada pengguna yang mereferensikan
  referredPoint     Int       @map("referred_point") @default(0) // Jumlah poin yang diberikan kepada pengguna baru
  createdAt         DateTime  @map("created_at") @default(now())

  @@map("referrals")
}

model PointsLog {
  id          Int       @id @default(autoincrement())
  userId      String       // User yang menerima poin
  user        User      @relation(fields: [userId], references: [id])
  description String    // Keterangan terkait poin (misal: "Referal bonus", "Pembelian kupon", dll.)
  points      Int       // Jumlah poin yang ditambahkan/dikurangi
  createdAt   DateTime  @default(now())

  @@map("points_log")
}

// enum DescriptionPoint {
//     REFERRAL_BONUS
//     WELCOME_BONUS
// }

model Notification {
    id                Int       @id @default(autoincrement())
    userId            String       @map("user_id")
    user              User      @relation(fields: [userId], references: [id])
    type              String
    message           String
    read              Boolean   @default(false)
    createdAt         DateTime  @map("created_at") @default(now())

    @@map("notifications")
}
