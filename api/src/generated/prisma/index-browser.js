
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  userName: 'userName',
  firstName: 'firstName',
  lastName: 'lastName',
  profilePicture: 'profilePicture',
  role: 'role',
  phone: 'phone',
  address: 'address',
  referralCode: 'referralCode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  eventPicture: 'eventPicture',
  location: 'location',
  startDate: 'startDate',
  endDate: 'endDate',
  price: 'price',
  availableSlots: 'availableSlots',
  totalSlots: 'totalSlots',
  organizerId: 'organizerId',
  status: 'status',
  isFree: 'isFree',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  ticketQuantity: 'ticketQuantity',
  totalPrice: 'totalPrice',
  discountPoints: 'discountPoints',
  discountVouchers: 'discountVouchers',
  discountCoupons: 'discountCoupons',
  finalPrice: 'finalPrice',
  status: 'status',
  paymentProof: 'paymentProof',
  paymentMethod: 'paymentMethod',
  expiredAt: 'expiredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  ticketCode: 'ticketCode',
  eventId: 'eventId',
  userId: 'userId',
  transactionId: 'transactionId',
  bibNumber: 'bibNumber',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  voucherCode: 'voucherCode',
  discountAmount: 'discountAmount',
  minimalPurchase: 'minimalPurchase',
  maximalDiscount: 'maximalDiscount',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  isEarlyBird: 'isEarlyBird',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoucherAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  voucherId: 'voucherId',
  transactionId: 'transactionId',
  status: 'status',
  usedAt: 'usedAt'
};

exports.Prisma.CouponScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  couponCode: 'couponCode',
  discountAmount: 'discountAmount',
  expiredAt: 'expiredAt',
  userId: 'userId',
  transactionId: 'transactionId',
  isActive: 'isActive',
  isUsed: 'isUsed',
  usedAt: 'usedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  eventId: 'eventId',
  userId: 'userId',
  title: 'title',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.BadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  eventId: 'eventId',
  badgeId: 'badgeId',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  referredId: 'referredId',
  createdAt: 'createdAt'
};

exports.Prisma.UserPointsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalPoints: 'totalPoints',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PointsLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  description: 'description',
  points: 'points',
  expiredAt: 'expiredAt',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  CUSTOMER: 'CUSTOMER',
  ORGANIZER: 'ORGANIZER',
  ADMIN: 'ADMIN'
};

exports.EventCategory = exports.$Enums.EventCategory = {
  FUN_RUN: 'FUN_RUN',
  FIVE_K: 'FIVE_K',
  TEN_K: 'TEN_K',
  HALF_MARATHON: 'HALF_MARATHON',
  MARATHON: 'MARATHON',
  ULTRA_MARATHON: 'ULTRA_MARATHON',
  TRAIL_RUN: 'TRAIL_RUN',
  VIRTUAL_RUN: 'VIRTUAL_RUN'
};

exports.EventStatus = exports.$Enums.EventStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ONGOING: 'ONGOING',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  AWAITING_PAYMENT: 'AWAITING_PAYMENT',
  PENDING_CONFIRMATION: 'PENDING_CONFIRMATION',
  PAID: 'PAID',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED',
  CANCELED: 'CANCELED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  BANK_TRANSFER: 'BANK_TRANSFER',
  CREDIT_CARD: 'CREDIT_CARD',
  E_WALLET: 'E_WALLET'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  ISSUED: 'ISSUED',
  USED: 'USED',
  CANCELED: 'CANCELED'
};

exports.VoucherStatus = exports.$Enums.VoucherStatus = {
  ISSUED: 'ISSUED',
  CANCELED: 'CANCELED'
};

exports.PointsLogType = exports.$Enums.PointsLogType = {
  REFERRAL_BONUS: 'REFERRAL_BONUS',
  PURCHASE: 'PURCHASE',
  PROMOTION: 'PROMOTION',
  REDEMPTION: 'REDEMPTION',
  REFUND: 'REFUND'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TRANSACTION: 'TRANSACTION',
  EVENT_UPDATE: 'EVENT_UPDATE',
  REMINDER: 'REMINDER',
  SYSTEM: 'SYSTEM'
};

exports.Prisma.ModelName = {
  User: 'User',
  Event: 'Event',
  Transaction: 'Transaction',
  Ticket: 'Ticket',
  Voucher: 'Voucher',
  VoucherAssignment: 'VoucherAssignment',
  Coupon: 'Coupon',
  Review: 'Review',
  Badge: 'Badge',
  UserBadge: 'UserBadge',
  Referral: 'Referral',
  UserPoints: 'UserPoints',
  PointsLog: 'PointsLog',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
