// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id
  email          String   @unique
  password       String
  userName       String   @unique @map("user_name")
  firstName      String   @map("first_name")
  lastName       String?  @map("last_name")
  profilePicture String?  @map("profile_picture")
  role           UserRole
  phone          String?
  address        String?
  referralCode   String   @unique @map("referral_code")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  events             Event[]             @relation("OrganizerEvents")
  transactions       Transaction[]
  tickets            Ticket[]
  voucherAssignments VoucherAssignment[]
  coupons            Coupon[]
  userPoints         UserPoints[]
  pointsLog          PointsLog[]
  referral           Referral[]          @relation("Referrer")
  referred           Referral[]          @relation("Referred")
  reviews            Review[]
  badges             UserBadge[]
  notifications      Notification[]

  @@map("users")
}

enum UserRole {
  CUSTOMER
  ORGANIZER
  ADMIN
}

model Event {
  id             Int           @id @default(autoincrement())
  title          String        @unique
  description    String
  category       EventCategory
  eventPicture   String?       @map("event_picture")
  location       String
  startDate      DateTime      @map("start_date")
  endDate        DateTime      @map("end_date")
  price          Int           @default(0)
  availableSlots Int           @map("available_slots")
  totalSlots     Int           @map("total_slots")
  organizerId    String        @map("organizer_id")
  organizer      User          @relation("OrganizerEvents", fields: [organizerId], references: [id])
  status         EventStatus   @default(DRAFT)
  isFree         Boolean       @default(false)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  transactions Transaction[]
  tickets      Ticket[]
  vouchers     Voucher[]
  reviews      Review[]
  badges       UserBadge[]

  @@map("events")
}

enum EventCategory {
  FUN_RUN
  FIVE_K
  TEN_K
  HALF_MARATHON
  MARATHON
  ULTRA_MARATHON
  TRAIL_RUN
  VIRTUAL_RUN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELED
}

model Transaction {
  id               Int               @id @default(autoincrement())
  eventId          Int               @map("event_id")
  event            Event             @relation(fields: [eventId], references: [id])
  userId           String            @map("user_id")
  user             User              @relation(fields: [userId], references: [id])
  ticketQuantity   Int               @map("ticket_quantity")
  totalPrice       Int               @map("total_price")
  discountPoints   Int               @default(0) @map("discount_points") // poin yang dipakai
  discountVouchers Int               @default(0) @map("discount_vouchers")
  discountCoupons  Int               @default(0) @map("discount_coupons")
  finalPrice       Int               @map("final_price") // total setelah diskon
  status           TransactionStatus
  paymentProof     String?           @map("payment_proof")
  paymentMethod    PaymentMethod     @map("payment_method")
  expiredAt        DateTime          @map("expired_at")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  tickets  Ticket[]
  vouchers VoucherAssignment[]
  coupons  Coupon[]

  @@map("transactions")
}

enum TransactionStatus {
  AWAITING_PAYMENT
  PENDING_CONFIRMATION
  PAID
  REJECTED
  EXPIRED
  CANCELED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  E_WALLET
}

model Ticket {
  id            Int          @id @default(autoincrement())
  ticketCode    String       @unique @map("ticket_code")
  eventId       Int          @map("event_id")
  event         Event        @relation(fields: [eventId], references: [id])
  userId        String       @map("user_id")
  user          User         @relation(fields: [userId], references: [id])
  transactionId Int          @map("transaction_id")
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
  bibNumber     String?      @unique @map("bib_number")
  status        TicketStatus @default(ISSUED)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")

  @@map("tickets")
}

enum TicketStatus {
  ISSUED
  USED
  CANCELED
}

model Voucher {
  id              Int      @id @default(autoincrement())
  eventId         Int      @map("event_id")
  event           Event    @relation(fields: [eventId], references: [id])
  voucherCode     String   @unique @map("voucher_code")
  discountAmount  Int      @map("discount_amount")
  minimalPurchase Int      @map("minimal_purchase")
  maximalDiscount Int      @map("maximal_discount")
  startDate       DateTime @map("start_date")
  endDate         DateTime @map("end_date")
  isActive        Boolean  @default(false)
  isEarlyBird     Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  assignments VoucherAssignment[]

  @@map("vouchers")
}

model VoucherAssignment {
  id            Int           @id @default(autoincrement())
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id])
  voucherId     Int           @map("voucher_id")
  voucher       Voucher       @relation(fields: [voucherId], references: [id])
  transactionId Int           @map("transaction_id")
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  status        VoucherStatus @default(ISSUED)
  usedAt        DateTime?     @map("used_at")

  @@map("voucher_assignments")
}

enum VoucherStatus {
  ISSUED
  CANCELED
}

model Coupon {
  id             Int          @id @default(autoincrement())
  title          String
  description    String
  couponCode     String       @unique @map("coupon_code")
  discountAmount Int          @map("discount_amount")
  expiredAt      DateTime     @map("expired_at")
  userId         String       @map("user_id")
  user           User         @relation(fields: [userId], references: [id])
  transactionId  Int?         @map("transaction_id")
  transaction    Transaction? @relation(fields: [transactionId], references: [id])
  isActive       Boolean      @default(true)
  isUsed         Boolean      @default(false)
  usedAt         DateTime?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("coupons")
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  title     String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}

model Badge {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  icon        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])
  badgeId   Int      @map("badge_id")
  badge     Badge    @relation(fields: [badgeId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_badges")
}

model Referral {
  id         Int      @id @default(autoincrement())
  referrerId String   @map("referrer_id")
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
  referredId String   @map("referred_id")
  referred   User     @relation("Referred", fields: [referredId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("referrals")
}

model UserPoints {
  id          Int      @id @default(autoincrement())
  userId      String   @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  totalPoints Int      @default(0) @map("total_points")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("user_points")
}

model PointsLog {
  id          Int           @id @default(autoincrement())
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  type        PointsLogType
  description String // Misal: "Referral bonus from user X"
  points      Int
  expiredAt   DateTime
  createdAt   DateTime      @default(now())

  @@map("points_log")
}

enum PointsLogType {
  REFERRAL_BONUS
  PURCHASE
  PROMOTION
  REDEMPTION
  REFUND
}

model Notification {
  id        Int              @id @default(autoincrement())
  userId    String           @map("user_id")
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  @@map("notifications")
}

enum NotificationType {
  TRANSACTION
  EVENT_UPDATE
  REMINDER
  SYSTEM
}
